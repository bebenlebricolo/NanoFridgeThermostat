#include <Arduino.h>

#include "U8glib.h"
#include "numbers_small.h"

U8GLIB_SSD1306_128X64 u8g(U8G_I2C_OPT_DEV_0 | U8G_I2C_OPT_NO_ACK | U8G_I2C_OPT_FAST); // Fast I2C / TWI

// all the arrays below are generated from images using image2cpp website
// scroll down to see the actual code

// 'NanoFridgeThermostatTitle', 88x23px
const unsigned char epd_bitmap_NanoFridgeThermostatTitle[] PROGMEM = {
    0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0xc0, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x98, 0xc7, 0x8c, 0x63, 0xc1, 0xf3, 0xe3, 0xf3, 0xc1, 0xe3,
    0xc8, 0x98, 0xcf, 0xcc, 0x67, 0xe1, 0xf3, 0xf3, 0xf3, 0xe3, 0xe3, 0xc8, 0x9c, 0xcc, 0xce, 0x66,
    0x61, 0x83, 0x30, 0xc3, 0x33, 0x03, 0x08, 0x9e, 0xcc, 0xcf, 0x66, 0x61, 0x83, 0x20, 0xc3, 0x33,
    0x03, 0x08, 0x9f, 0xcf, 0xcf, 0xe6, 0x61, 0xe3, 0xc0, 0xc3, 0x33, 0x03, 0xc8, 0x9b, 0xcf, 0xcd,
    0xe6, 0x61, 0xe3, 0xe0, 0xc3, 0x33, 0x73, 0x08, 0x99, 0xcc, 0xcc, 0xe6, 0x61, 0x83, 0x70, 0xc3,
    0x33, 0x33, 0x08, 0x98, 0xcc, 0xcc, 0x67, 0xe1, 0x83, 0x33, 0xf3, 0xe3, 0xf3, 0xc8, 0x98, 0xcc,
    0xcc, 0x63, 0xc1, 0x83, 0x33, 0xf3, 0xc1, 0xe3, 0xc8, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x08, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x87,
    0xe6, 0x67, 0x9e, 0x18, 0xc7, 0x87, 0x9f, 0x8e, 0x3f, 0x08, 0x87, 0xe6, 0x67, 0x9f, 0x98, 0xcc,
    0xcf, 0x9f, 0x9f, 0x3f, 0x08, 0x81, 0x86, 0x66, 0x19, 0x9d, 0xcc, 0xc8, 0x06, 0x1b, 0x0c, 0x08,
    0x81, 0x87, 0xe7, 0x19, 0x9d, 0xcc, 0xcf, 0x06, 0x1f, 0x0c, 0x08, 0x81, 0x87, 0xe7, 0x1f, 0x1a,
    0xcc, 0xc7, 0x86, 0x1f, 0x0c, 0x08, 0x81, 0x86, 0x66, 0x1f, 0x98, 0xcc, 0xc0, 0x86, 0x1b, 0x0c,
    0x08, 0x81, 0x86, 0x67, 0x99, 0x98, 0xcc, 0xcf, 0x86, 0x1b, 0x0c, 0x08, 0x81, 0x86, 0x67, 0x99,
    0x98, 0xc7, 0x8f, 0x06, 0x1b, 0x0c, 0x08, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x18, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0};

// 'ui_concepts', 128x64px
const unsigned char epd_bitmap_ui_concepts[] PROGMEM = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x38, 0x00, 0x00, 0x00, 0x38,
    0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x60, 0x00, 0x04, 0x00, 0x0c,
    0x4c, 0x63, 0xc6, 0x31, 0xe0, 0xf9, 0xf1, 0xf9, 0xe0, 0xf1, 0xe4, 0xc0, 0x00, 0x0e, 0x00, 0x06,
    0x4c, 0x67, 0xe6, 0x33, 0xf0, 0xf9, 0xf9, 0xf9, 0xf1, 0xf1, 0xe4, 0x80, 0x00, 0x1f, 0x00, 0x02,
    0x4e, 0x66, 0x67, 0x33, 0x30, 0xc1, 0x98, 0x61, 0x99, 0x81, 0x84, 0x80, 0x00, 0x3f, 0x00, 0x02,
    0x4f, 0x66, 0x67, 0xb3, 0x30, 0xc1, 0x90, 0x61, 0x99, 0x81, 0x84, 0x00, 0x00, 0x7e, 0x00, 0x60,
    0x4f, 0xe7, 0xe7, 0xf3, 0x30, 0xf1, 0xe0, 0x61, 0x99, 0x81, 0xe4, 0x00, 0x00, 0xfc, 0x00, 0xf0,
    0x4d, 0xe7, 0xe6, 0xf3, 0x30, 0xf1, 0xf0, 0x61, 0x99, 0xb9, 0x84, 0x00, 0x01, 0xf8, 0x01, 0x98,
    0x4c, 0xe6, 0x66, 0x73, 0x30, 0xc1, 0xb8, 0x61, 0x99, 0x99, 0x84, 0x00, 0x03, 0xf0, 0x01, 0x98,
    0x4c, 0x66, 0x66, 0x33, 0xf0, 0xc1, 0x99, 0xf9, 0xf1, 0xf9, 0xe4, 0x00, 0x07, 0xfc, 0x00, 0xf0,
    0x4c, 0x66, 0x66, 0x31, 0xe0, 0xc1, 0x99, 0xf9, 0xe0, 0xf1, 0xe4, 0x00, 0x0f, 0xff, 0x00, 0x60,
    0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x1f, 0xff, 0x80, 0x00,
    0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x18, 0x1f, 0x07, 0xc0, 0x00,
    0x43, 0xf3, 0x33, 0xcf, 0x0c, 0x63, 0xc3, 0xcf, 0xc7, 0x1f, 0x84, 0x18, 0x3e, 0x03, 0xc0, 0xf8,
    0x43, 0xf3, 0x33, 0xcf, 0xcc, 0x66, 0x67, 0xcf, 0xcf, 0x9f, 0x84, 0x18, 0x3c, 0x01, 0xe1, 0xf8,
    0x40, 0xc3, 0x33, 0x0c, 0xce, 0xe6, 0x64, 0x03, 0x0d, 0x86, 0x04, 0xff, 0x3c, 0x01, 0xe3, 0x80,
    0x40, 0xc3, 0xf3, 0x8c, 0xce, 0xe6, 0x67, 0x83, 0x0f, 0x86, 0x04, 0xff, 0x3c, 0x01, 0xe3, 0x00,
    0x40, 0xc3, 0xf3, 0x8f, 0x8d, 0x66, 0x63, 0xc3, 0x0f, 0x86, 0x04, 0x18, 0x3c, 0x01, 0xe3, 0x00,
    0x40, 0xc3, 0x33, 0x0f, 0xcc, 0x66, 0x60, 0x43, 0x0d, 0x86, 0x04, 0x18, 0x3c, 0x01, 0xe3, 0x00,
    0x40, 0xc3, 0x33, 0xcc, 0xcc, 0x66, 0x67, 0xc3, 0x0d, 0x86, 0x04, 0x18, 0x3e, 0x03, 0xe3, 0x00,
    0x40, 0xc3, 0x33, 0xcc, 0xcc, 0x63, 0xc7, 0x83, 0x0d, 0x86, 0x04, 0x00, 0x1f, 0x07, 0xc3, 0x80,
    0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x0f, 0xff, 0x81, 0xf8,
    0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x07, 0xff, 0x00, 0xf8,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xfe, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x18, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x20, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x46, 0x63, 0x22, 0x49, 0x88, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x12, 0x31, 0x10, 0x02,
    0x48, 0x94, 0xa0, 0x6a, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x1a, 0x49, 0x10, 0x02,
    0x08, 0x94, 0xa2, 0x5a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x16, 0x49, 0x50, 0x06,
    0x08, 0x94, 0xa2, 0x4a, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x12, 0x49, 0x50, 0x0c,
    0x06, 0x63, 0x3a, 0x49, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x12, 0x30, 0xa0, 0x38,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x04, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x02, 0x1f, 0x9f, 0x82, 0x00, 0x00, 0xe0, 0x00, 0x00, 0x00, 0x70, 0x38, 0x00, 0x00, 0x00, 0x38,
    0x1d, 0x00, 0xf0, 0x1d, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x18, 0x60, 0x00, 0x00, 0x00, 0x0c,
    0x02, 0x1e, 0x67, 0x82, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x0c, 0xc0, 0x00, 0x00, 0x00, 0x06,
    0x04, 0x01, 0x68, 0x04, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x04, 0x80, 0x00, 0x00, 0x00, 0x02,
    0x00, 0x03, 0xfc, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x04, 0x80, 0x00, 0x00, 0x00, 0x02,
    0x00, 0x02, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x70, 0x00,
    0x00, 0x03, 0xfc, 0x00, 0x00, 0x00, 0x0c, 0x3e, 0x1e, 0x00, 0x00, 0x00, 0x00, 0x38, 0x50, 0x00,
    0x00, 0x03, 0x0c, 0x00, 0x00, 0x00, 0x1c, 0x3e, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x70, 0x70, 0x00,
    0x00, 0x03, 0xfc, 0x00, 0x00, 0x00, 0x3c, 0x30, 0x33, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x00, 0x00,
    0x00, 0x03, 0x0c, 0x00, 0x00, 0x00, 0x6c, 0x3c, 0x33, 0x00, 0x00, 0x00, 0x21, 0xc0, 0x70, 0x00,
    0x00, 0x03, 0x0c, 0x00, 0x00, 0x00, 0x0c, 0x3e, 0x33, 0x00, 0x00, 0x00, 0x21, 0x98, 0x80, 0x00,
    0x00, 0x03, 0xfc, 0x00, 0x00, 0x00, 0x0c, 0x06, 0x33, 0x3e, 0x40, 0x00, 0xf9, 0xfc, 0x80, 0x00,
    0x01, 0x12, 0x64, 0x00, 0x00, 0x00, 0x0c, 0x06, 0x33, 0x2a, 0xa0, 0x00, 0x21, 0xfc, 0x80, 0x00,
    0x02, 0xa0, 0x60, 0x00, 0x00, 0x00, 0x0c, 0x06, 0x33, 0x2a, 0xe0, 0x00, 0x20, 0x18, 0x80, 0x00,
    0x0a, 0xa0, 0x60, 0x00, 0x00, 0x00, 0x3e, 0x3e, 0x3f, 0x2a, 0xa0, 0x00, 0x00, 0x18, 0x70, 0x00,
    0x04, 0x40, 0xf1, 0xfe, 0x00, 0x00, 0x3e, 0x3c, 0x1e, 0x2a, 0xa0, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0xf3, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x02, 0x30, 0x91, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x05, 0x43, 0x9f, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x07, 0x40, 0x91, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x05, 0x30, 0x93, 0x02, 0x00, 0x02, 0x06, 0x97, 0x77, 0x4b, 0x84, 0x80, 0xe4, 0xe6, 0xee, 0x02,
    0x40, 0x00, 0x91, 0xfe, 0x08, 0x02, 0x08, 0x95, 0x54, 0x69, 0x04, 0x80, 0x4a, 0xa8, 0x84, 0x02,
    0x40, 0x00, 0x00, 0x00, 0x08, 0x03, 0x08, 0x96, 0x67, 0x59, 0x0c, 0xc0, 0x4e, 0xca, 0xe4, 0x06,
    0x20, 0x00, 0x00, 0x00, 0x10, 0x01, 0x88, 0x95, 0x54, 0x49, 0x18, 0x60, 0x4a, 0xaa, 0x84, 0x0c,
    0x18, 0x00, 0x00, 0x00, 0x60, 0x00, 0xe6, 0x65, 0x57, 0x49, 0x70, 0x38, 0x4a, 0xa6, 0xe4, 0x38,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};


// 'Compressor_animation1_0001', 24x22px
const unsigned char epd_bitmap_Compressor_animation1_0001 [] PROGMEM = {
	0xfc, 0xfc, 0x00, 0x07, 0x80, 0x00, 0xf3, 0x3c, 0x00, 0x0b, 0x40, 0x00, 0x1f, 0xe0, 0x00, 0x1f,
	0xe0, 0x00, 0x18, 0x60, 0x00, 0x1f, 0xe0, 0x00, 0x18, 0x60, 0x00, 0x18, 0x60, 0x00, 0x1f, 0xe0,
	0x00, 0x13, 0x20, 0x00, 0x13, 0x20, 0x00, 0x13, 0x20, 0x00, 0x13, 0x20, 0x00, 0x03, 0x0f, 0xf0,
	0x07, 0x98, 0x10, 0x04, 0x8f, 0xf0, 0x1c, 0xf8, 0x10, 0x04, 0x8f, 0xf0, 0x04, 0x98, 0x10, 0x00,
	0x0f, 0xf0
};
// 'Compressor_animation1_0002', 24x22px
const unsigned char epd_bitmap_Compressor_animation1_0002 [] PROGMEM = {
	0xfc, 0xfc, 0x00, 0x07, 0x80, 0x00, 0xf3, 0x3c, 0x00, 0x0b, 0x40, 0x00, 0x1f, 0xe0, 0x00, 0x10,
	0x20, 0x00, 0x1f, 0xe0, 0x00, 0x18, 0x60, 0x00, 0x1f, 0xe0, 0x00, 0x18, 0x60, 0x00, 0x18, 0x60,
	0x00, 0x1f, 0xe0, 0x00, 0x13, 0x20, 0x00, 0x13, 0x20, 0x00, 0x13, 0x20, 0x00, 0x03, 0x0f, 0xf0,
	0x07, 0x98, 0x10, 0x07, 0x8f, 0xf0, 0x1c, 0xf8, 0x10, 0x04, 0x8f, 0xf0, 0x04, 0x98, 0x10, 0x00,
	0x0f, 0xf0
};
// 'Compressor_animation1_0003', 24x22px
const unsigned char epd_bitmap_Compressor_animation1_0003 [] PROGMEM = {
	0xfc, 0xfc, 0x00, 0x07, 0x80, 0x00, 0xf3, 0x3c, 0x00, 0x0b, 0x40, 0x00, 0x1f, 0xe0, 0x00, 0x10,
	0x20, 0x00, 0x10, 0x20, 0x00, 0x1f, 0xe0, 0x00, 0x18, 0x60, 0x00, 0x1f, 0xe0, 0x00, 0x18, 0x60,
	0x00, 0x18, 0x60, 0x00, 0x1f, 0xe0, 0x00, 0x13, 0x20, 0x00, 0x13, 0x20, 0x00, 0x03, 0x0f, 0xf0,
	0x07, 0x98, 0x10, 0x07, 0x8f, 0xf0, 0x1f, 0xf8, 0x10, 0x04, 0x8f, 0xf0, 0x04, 0x98, 0x10, 0x00,
	0x0f, 0xf0
};
// 'Compressor_animation1_0004', 24x22px
const unsigned char epd_bitmap_Compressor_animation1_0004 [] PROGMEM = {
	0xfc, 0xfc, 0x00, 0x07, 0x80, 0x00, 0xf3, 0x3c, 0x00, 0x0b, 0x40, 0x00, 0x1f, 0xe0, 0x00, 0x10,
	0x20, 0x00, 0x10, 0x20, 0x00, 0x10, 0x20, 0x00, 0x1f, 0xe0, 0x00, 0x18, 0x60, 0x00, 0x1f, 0xe0,
	0x00, 0x18, 0x60, 0x00, 0x18, 0x60, 0x00, 0x1f, 0xe0, 0x00, 0x13, 0x20, 0x00, 0x03, 0x0f, 0xf0,
	0x07, 0x98, 0x10, 0x07, 0x8f, 0xf0, 0x1f, 0xf8, 0x10, 0x07, 0x8f, 0xf0, 0x04, 0x98, 0x10, 0x00,
	0x0f, 0xf0
};
// 'Compressor_animation1_0005', 24x22px
const unsigned char epd_bitmap_Compressor_animation1_0005 [] PROGMEM = {
	0xfc, 0xfc, 0x00, 0x07, 0x80, 0x00, 0xf3, 0x3c, 0x00, 0x0b, 0x40, 0x00, 0x1f, 0xe0, 0x00, 0x10,
	0x20, 0x00, 0x10, 0x20, 0x00, 0x10, 0x20, 0x00, 0x10, 0x20, 0x00, 0x1f, 0xe0, 0x00, 0x18, 0x60,
	0x00, 0x1f, 0xe0, 0x00, 0x18, 0x60, 0x00, 0x18, 0x60, 0x00, 0x1f, 0xe0, 0x00, 0x03, 0x0f, 0xf0,
	0x07, 0x98, 0x10, 0x07, 0x8f, 0xf0, 0x1f, 0xf8, 0x10, 0x07, 0x8f, 0xf0, 0x07, 0x98, 0x10, 0x00,
	0x0f, 0xf0
};

// Eraser, 24x22px
const unsigned char compressor_eraser [] PROGMEM = {
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff
};

// Array of all bitmaps for convenience. (Total bytes used to store images in PROGMEM = 480)
const int COMPRESSOR_ANIMATION_LEN = 5;
const unsigned char* compressor_animation[COMPRESSOR_ANIMATION_LEN] = {
	epd_bitmap_Compressor_animation1_0001,
	epd_bitmap_Compressor_animation1_0002,
	epd_bitmap_Compressor_animation1_0003,
	epd_bitmap_Compressor_animation1_0004,
	epd_bitmap_Compressor_animation1_0005
};



// ------------------ end generated bitmaps from image2cpp ---------------------------------
void setup()
{
  u8g.setColorIndex(1); // set the color to white
  pinMode(3, OUTPUT);
}

void draw_nano_fridge_thermostat_logo(void)
{
  u8g.drawBitmapP(1, 1, 88 / 8, 23, epd_bitmap_NanoFridgeThermostatTitle);
}

void draw_full_ui_mockup(void)
{
  u8g.drawBitmapP(0, 0, 128 / 8, 64, epd_bitmap_ui_concepts);
}

void draw_numbers_and_text(void)
{
  u8g.setFont(u8g_font_ncenB14);
  u8g.drawStr(0, 26, "Current :");

  u8g.setFont(u8g_font_ncenB24);
  u8g.drawStr(90, 26, "6"
                      "\xB0");

  u8g.setFont(u8g_font_ncenB14);
  u8g.drawStr(0, 56, "Target :");
  u8g.drawStr(90, 56, "4"
                      "\xB0");
}


void draw_compressor_animation(void)
{
  static unsigned char index = 0;
  static bool increasing = true;
  u8g.firstPage(); // required for page drawing mode for u8g library
  do
  {
    u8g.drawBitmapP(0, 0, 128 / 8, 64, epd_bitmap_ui_concepts);

    // Remove compressor background
    u8g.setColorIndex(0); // Eraser
    u8g.drawBitmapP(11, 38, 24 / 8, 22, compressor_eraser);

    u8g.setColorIndex(1); // Write again
    u8g.drawBitmapP(11, 38, 24 / 8, 22, compressor_animation[index]);
  } while (u8g.nextPage()); // required for page drawing mode with u8g library

  if(increasing)
  {
    index++;
  }
  else
  {
    index--;
  }

  if(index == COMPRESSOR_ANIMATION_LEN - 1)
  {
    increasing = false;
  }

  if(index == 0)
  {
    increasing = true;
  }
}

// This single function takes up to 168ms to complete.
// This gives us a slight bit over 5 fps, which is quite poor.
// Also, the underlying I2C implementation in u8glib uses busy-waiting between each TWI hardware calls ;
// Hence the very slow framerate and 100% CPU time being consumed.
// -> Drawing to the screen should be done wisely.
void draw_mockup_ui(void)
{
  digitalWrite(3, HIGH);
  u8g.firstPage(); // required for page drawing mode for u8g library
  digitalWrite(3, LOW);
  do
  {
    // draw_nano_fridge_thermostat_logo();
    // draw_numbers_and_text();
    draw_full_ui_mockup();
  } while (u8g.nextPage()); // required for page drawing mode with u8g library

  digitalWrite(3, HIGH);
}

void loop()
{
  static bool first_boot = true;
  if (first_boot)
  {
    draw_mockup_ui();
    uint8_t data[16*3][18] = {0};
    image_buffer_t buffer;
    buffer.data = (uint8_t**) data;

    draw_temperature(23, &buffer, false);
    first_boot = false;
    return;
  }

  draw_compressor_animation();
}